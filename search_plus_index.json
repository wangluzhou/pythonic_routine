{"./":{"url":"./","title":"Introduction","keywords":"","body":"Pythonic Routine协作写作参与者 freeman 大船 beckyme Introduction 一起来写作写gitbook吧~ 规则： 一级目录按照周数来，符合大家的学习顺序。 内容分类： 开智卡片内容：完成卡片的抄录和整理，特别是对卡片里链接里的内容进行整理 [环境]Python三座大山之一：环境。讲述你遇到的一些环境配置的问题。 [语言]Python三座大山之一：Python语言。讲述你碰到的一些Python本身的问题。 [包]Python三座大山之一：Python包。讲述你用到一些包信息，比如爬虫包，科学计算包等等。 [作业]作业交流 卡片内容是我们的主线，直接写在每一周的README.md文件内。 如果要分享三座大山里面的相关内容，请直接在对应的weekX里面插入新的md文件，并且在文件summary.md里面进行补充，加入一个二级目录。 比如我想加入一些gitbook的使用心得。那么我需要在summary.md文件加入如下[环境.gitbook使用]，其中的环境表示这块内容属于环境子内容： * [Introduction](README.md) * [第0周](week0/README.md) * [环境.gitbook使用](week0/gitbook.md) * [第1周](week1/README.md) 然后在week0下面添加gitbook.md 操作手册 由于当前gitbook发布的电子书在浏览器上总是打不开，因此暂时采用迂回方法,即利用gitpage进行发布。 安装gitbook 在本地clone我们的pythonic routine这个库 进行自己的修改 在pythonic_routine目录下输入gitbook build 生成静态页面目录_book 将_book下面所有的文件以及pythonic_routine下所有的文件都copy到另一个新的文件夹下，cd到该文件夹下，切换到gh-pages分支：git checkout gh-pages 然后上传到gh-pages.即add，commit,push流程。 注意最后的push命令如下：git push origin gh-pages var className='atoc';"},"week0/":{"url":"week0/","title":"第0周","keywords":"","body":"第0周开片内容整理 var className='atoc';"},"week0/gitbook.html":{"url":"week0/gitbook.html","title":"环境.gitbook使用","keywords":"","body":" gitbook 添加.gitignore添加一些不需要上传的文件 如何将gitbook发布到自己的域名的子域名上 gitbook如何安装插件？ gitbook editor只支持https并不支持ssh gitbook插件介绍 gitbook动态更新问题 注意：gitbook editor打开的时候不要直接选择云端的gitbook库，而是要选择本地的gitbook库，这样gitbook和atom就可以实现本地的同步。 如何将gitbook发布到个人域名的子域名下 gitbook 参考教程 需要注意的是，我们正常安装的其实是gitbook-cli,如果只是安装gitbook的话，gitbook的命令行是无效的。也就是输入： npm install -g gitbook-cli gitbook可能支持两级目录。 推荐在编写gitbook的时候始终打开gitbook serve,这样一来，在文件的编写修改过程中，每一次保存文件，gitbook serve都会自动编译，所以可以持续通过浏览器查看最新的书籍效果。非常酷炫！！！ 整体流程就按照上面参考教程的指示操作就行。但是需要注意的是，我们的最终目的都是希望能有自己的书籍域名可以公开发布我们的书籍。因此最后必然需要同步到github通过gitpage进行发布。 另外gitbook自带搜索引擎，你说酷不酷！ GitBook.com 为每本书籍都创建了一个 Git 项目，并且使用这个 Git 项目来管理书籍源码（注意：这里的源码是指所有用户提交的内容）。正如在 编辑书籍 中介绍的那样，我们可以通过向书籍的 Git 项目提交内容来更新书籍。 另外，GitBook.com 还可以集成 GitHub，所以用户可以将书籍的源码通过 GitHub 上的项目来管理，这样可以使用 GitHub 带来的各种优点，例如： 其它用户可以 fork 用户可以点赞，获得更新提醒 用户可以贡献自己的内容GitBook.com 为每本书籍都创建了一个 Git 项目，并且使用这个 Git 项目来管理书籍源码（注意：这里的源码是指所有用户提交的内容）。正如在 编辑书籍 中介绍的那样，我们可以通过向书籍的 Git 项目提交内容来更新书籍。 另外，GitBook.com 还可以集成 GitHub，所以用户可以将书籍的源码通过 GitHub 上的项目来管理，这样可以使用 GitHub 带来的各种优点，例如： 其它用户可以 fork 用户可以点赞，获得更新提醒 用户可以贡献自己的内容 关于如何将本地的gitbook上传到gitbook 但是我们其实并不需要这么做，只要上传到github，然后将github这个库和gitbook的某本书关联一下就行了，唯一要注意的就是这个库的文件树格式要遵循gitbook的要求。所以本地的环境维持github的环境就好，减少踩坑的概率。 如果你的gitbook找不到你在github的库，你就需要去github上设置一下。 在github右上角点击setting,进入设置页面，在左下角做到installed Github apps，点击进去，然后点击gitbook，在repository access设置All repositories即可。 添加.gitignore添加一些不需要上传的文件 如何将gitbook发布到自己的域名的子域名上 将gitbook挂在到自己的子域名一定是一个非常有趣的问题。 gitbook如何安装插件？ 似乎有两种安装方法: 方法一 方法二 有空研究一下 gitbook editor只支持https并不支持ssh 我们需要将gitbook远程库的连接方式改成https gitbook插件介绍 资源1 gitbook官网资源 gitbook动态更新问题 当我们输入gitbook serve的时候，一旦更新了文件，就会报错，导致gitbook serve停止工作。 Restart after change in file SUMMARY.md Stopping server Error: EPERM: operation not permitted, mkdir 'C:\\Users\\cleopatra\\Desktop\\abum_code\\_book' github上的creatop-john提出了一个办法,有时会有效： gitbook serve delete _book folder once now each time you change the md file, the server will stop and start over again and again 注意：gitbook editor打开的时候不要直接选择云端的gitbook库，而是要选择本地的gitbook库，这样gitbook和atom就可以实现本地的同步。 如何将gitbook发布到个人域名的子域名下 参考资料 var className='atoc';"},"week0/git.html":{"url":"week0/git.html","title":"环境.git使用","keywords":"","body":"git踩坑之路 git 删除已经track的文件 参考文章 在git中如果想忽略掉某个文件，不让这个文件提交到版本库中，可以使用修改根目录中 .gitignore 文件的方法（如无，则需自己手工建立此文件）。这个文件每一行保存了一个匹配的规则例如： # 此为注释 – 将被 Git 忽略 *.a # 忽略所有 .a 结尾的文件 !lib.a # 但 lib.a 除外 /TODO # 仅仅忽略项目根目录下的 TODO 文件，不包括 subdir/TODO build/ # 忽略 build/ 目录下的所有文件 doc/*.txt # 会忽略 doc/notes.txt 但不包括 doc/server/arch.txt 规则很简单，不做过多解释，但是有时候在项目开发过程中，突然心血来潮想把某些目录或文件加入忽略规则，按照上述方法定义后发现并未生效，原因是.gitignore只能忽略那些原来没有被track的文件，如果某些文件已经被纳入了版本管理中，则修改.gitignore是无效的。那么解决方法就是先把本地缓存删除（改变成未track状态），然后再提交： git rm -r --cached . git add . git commit -m 'update .gitignore' 关于git无法忽视_book的最终原因 好吧，是我把.gitignore写成.gitigorne了 git切换分支 git branch -a 查看所有分支 git branch 查看当前分支 git checkout master 切换到master分支 关于git无法识别.gitignore的原因 var className='atoc';"},"week1/":{"url":"week1/","title":"第1周","keywords":"","body":"第一周卡片内容 var className='atoc';"},"week1/homework.html":{"url":"week1/homework.html","title":"作业.天气查询系统","keywords":"","body":"作业汇总 作业任务： 完成一个最简天气查询程序，运行在命令行界面，实现以下功能： 输入城市名，返回该城市的天气数据； 输入指令，打印帮助文档（一般使用 h 或 help）； 输入指令，退出程序的交互（一般使用 quit 或 exit）； 在退出程序之前，打印查询过的所有城市。 所用天气数据见 https://github.com/AIHackers/Py101-004/tree/master/Chap1/resource 中 weather_info.txt 文件。 大船: 整体思想：封装天气查询功能到一个类中。 import csv from sys import exit class WeatherSearcher(object): def __init__(self): self.data_init() self._history = \"\" def data_init(self): self._data = {} with open('../resource/weather_info.txt', 'r') as f: for line in f: tmp = line.strip().split(',') self._data[tmp[0]] = tmp[1] def get_weather(self, city_to_search): if city_to_search in self._data.keys(): weather = self._data[city_to_search] self._history += city_to_search + \" \" + weather + \"\\n\" return weather else: return None def get_help(self): help_info = ''' 输入城市名，查询该城市的天气数据； 输入help或者h，获得帮助信息； 输入history，显示查询历史； 输入quit, 退出程序。 ''' return help_info def get_history(self): return self._history def run(): # 初始化城市天气搜索类 weather_searcher = WeatherSearcher() while True: city_to_search = input(\"请输入指令和你要查询的城市名: \") # 输入矫正 city_to_search = city_to_search.replace(\" \", \"\") # 判断输入内容 if city_to_search == \"quit\": print(\"再见！\") exit() elif city_to_search in [\"help\", \"h\"]: print(weather_searcher.get_help()) elif city_to_search == \"history\": print(weather_searcher.get_history()) else: weather = weather_searcher.get_weather(city_to_search) if weather is not None: print(\"{city}的天气状况为{weather}\".format(city=city_to_search, weather=weather)) else: print(\"你要查找的城市没有找到，请重新输入!可以输入help或者h查看帮助信息。\") if __name__ == \"__main__\": run() Becky： weather = {} history = {} help = ''' 输入城市名，查询该城市天气情况。 输入‘h’或‘help’，获取帮助文档。 输入history，获取历史查询记录。 输入‘quit’或‘exit’，退出查询系统。 ''' def print_history(): print(\"这是您查询的历史记录：\") for city, weather in list(history.items()):# 将字典转换为列表就可以格式化输出啦~ print(\"{}目前的天气是{}\".format(city, weather)) with open(\"weather_info.txt\", \"r\", encoding = \"UTF-8\") as file:# 打开文件，添加相对路径用../文件夹/文件名 for lines in file:# 转换为字典 weather_list = lines.strip().split(\",\") weather[weather_list[0]] = weather_list[1] while True: user_type = input(\"请输入指令或城市名：\") if user_type in weather:# 输出城市天气 answer = weather.get(user_type) print(\"{}目前的天气是{}\".format(user_type, answer)) history[user_type] =answer elif user_type in (\"h\", \"help\"):# 输出指令help #elif (user_type == \"h\") or (user_type == \"help\"): print(help) elif user_type == \"history\":# 输出历史记录 print_history() elif user_type in ('quit', 'exit'):# 退出 print_history() print(\"感谢您的查询，希望你查询的城市天气如您所愿。\") break else:# 用户输入其他字符时输出 print(\"你所查询的城市或指令不在服务区，请输入“h”或“help”获取帮助。\") var className='atoc';"},"week2/":{"url":"week2/","title":"第2周:连接真实的世界","keywords":"","body":"1A 和 API 欢快玩耍 搞定你的首个 MVP，现在你是不是内心特别欣喜，感觉自己潜力无限？ 啊哈，请保持这样的自信，迎接本章新挑战 —— 用 API 获取真实、实时的天气数据，让你的程序与真实世界互通起来。 API ~ Application Programming Interface 完成本章任务，你的小小程序，将可以为你播报最新天气情况，想想就超酷 ;-) 你甚至会惊奇地发现，编程在这个世界上有如此多好玩的用法，还有无数 API 任意调用。 新的世界，在你眼前渐渐展开。欢迎来到新世界！ 1B 如果 2wd1 11:42 前，你还未完成 ch0 挑战，建议你按下述建议行动，跳过其它无关行动： 先用 Python3 改写 7 个《Learn Python The Hard Way》小练习，熟悉 Python3 的使用 然后完成 ch1 基础任务，获得第 1 个 MVP 程序 最后挑战 ch2 任务（其实是 ch1 成果的升级版），跟上课程节奏 如果你看到周围还有学友死磕 ch0 所有行动（比如调试各种工具），而非开始挑战 ch1 和 ch2 任务，麻烦提醒一下 Ta 哟。 2A ch2 目标：通过 API 获取真实、即时的数据 本章，你将学习通过 API 获取真实、即时的数据来完善天气程序。 你的程序从本章开始，将真正成为一个可以解决你实际问题的应用啦。 你将会体验到： 如何选择一个合适的 API 使用 requests 模块来对 API 发送请求、传递参数、接受返回的数据 处理 API 返回的数据，转换为 Python 中合适的数据结构 2B 从这一章开始，你的程序不再只和本地的数据进行交互，而是利用互联网上公开的 API 获取数据，进行交互。 本章基础任务较简单，学有余力，你可完成进阶任务，做更多探索。如果进阶任务也折腾完毕，还可以发邮件到 course@openmindclub.com ，申请任务加码;-) 经过 2 周玩耍，相信你已体会开智翻转课堂模式的特色 —— 什么是\"课\"? | Zoom.Quiet Personal Static Wiki —— 开智课程提供的教练资源、同侪氛围似一片土壤，最终长出什么来你说了算 3A ch2 课程任务介绍video 3B 本章基础任务：完成一个在命令行界面下天气查询程序，实现以下功能： 输入城市名，返回该城市最新的天气数据； 输入指令，获取帮助信息（一般使用 h 或 help）； 输入指令，获取历史查询信息（一般使用 history）； 输入指令，退出程序的交互（一般使用 quit 或 exit）； 提交时需包含软件使用说明书 README.md， 能令其他同学根据说明书运行程序，使用所有功能。 完成基础任务后，你可查看后面的进阶任务卡领取进阶任务，解锁更多技能 ;-) 4A 如何使用本章卡片？ 至此，你已知晓本章任务，接下来的卡片将指引你完成任务，提示你需重点思考的问题、可参考的资料及可能踩的坑。 按阳志平老师在「编程与心智」视频中提到的分类，你可以选择更适合自己的学习方式： 如果你是新新手或新手，建议你先抽 15-20 分钟快速总览本卡包剩余卡片，心中有数，再对着任务卡明确本章任务重点（可查询实时天气的程序），开始输出。 如果你是专业余同学，你可开始自主探索，完成初版代码后，再对着本卡包查漏补缺。 4B 每周你将收到这以下卡包，使用建议如下： 当章任务卡包：周一 11:42 前上线，介绍本章任务内容和一些完成提示。此卡包使用建议参见本卡片正面。 当章任务提点卡包：周四 11:42 前上线，详细讲解本章任务思路。如果此时你依然对本章任务没有眉目，可翻看此卡包；如果对完成任务有把握，不看也无妨。 当章任务加油卡包：下周二 19:42 前上线，点评当章典型问题、优秀实践。一定别错过哦。 5A 想要获取最新天气数据，当然得找相应机构调取。那如何调取？这就涉及到 API 啦。 现在各大互联网公司和机构都有对外开放的 API ，供用户完成很多有意思的事情。 你可以带着这几个问题，先去探索一下 API ： API 是什么，解决什么问题？ API 一般接收什么输入，返回什么数据？ 互联网上有哪些类型的 API ？他们为什么要把 API 开放出来？ flip buttongradient 5B 参考资料： What is an API? - Youtube Application Programming Interface - Wikipedia - API Providers - Apigee API Store What APIs Are And Why They’re Important 如果探索国外的 API 有网络不稳定的情况，别忘了科学上网。 6A： 选择合适的API 了解什么是 API 后，是时候选择一个顺手的天气 API 来完成本章任务啦~ 弱水三千，只取一瓢。互联网上有非常多的天气 API，那如何选择一个合适的 API ？ 对于本任务，建议你在选择 API 时考虑以下问题： 是否有 Python 的 demo ？ 使用上有哪些限制（比如要收费）？ 数据源是否可靠？ ... 6B 教练检索了一些 API 供你选择： 心知天气 - 天气数据 API 和BI - 冷暖自心知 Weather API- OpenWeatherMap 彩云天气API 7A 使用 requests 模块发送请求 选定了 API ，你就可以通过 Python 来和 API 进行交互啦。 requests 模块是你和 API 进行交互的主要工具。这是非常优秀的第三方网络模块，需要单独安装。安装好后，请你探索： 如何在程序中引入 requests 模块？ 如何使用 requests 模块发送请求？ POST 和 GET 是什么意思？如何用 requests 模块发送 POST 或者 GET 请求？ 7B Python 和 API 进行交互使用的是 HTTP 协议。在Python 中，有很多模块 (Python 自带的 urllib 模块以及我们这里推荐的requests模块) 可以对请求和接收的数据进行封装，通过 HTTP 协议在互联网上传输。 参考资料： Requests: HTTP for Humans HTTP 方法：GET 对比 POST - 8A 处理 API 返回的数据 给 API 发送请求后，就要考虑如何处理 API 返回的数据啦： 如何获得 API 返回的数据？ 如何在 Python 中处理 JSON 数据？ JSON 的来历是什么？ 为什么绝大多数 API 都选择以 JSON 的方式传递数据？ 8B JSON 是一种存储和交换文本信息的语法。它支持多种编程语言，也是目前最流行的数据交换方式。 想要了解更多关于 JSON 的信息，可以参考： Introducing JSON 19.2. json — JSON encoder and decoder JSON Response Content 嗯哼，至此，本章基础任务就完成得差不多啦。 9A 进阶任务：玩转 API（选做） 如果你已完成基础任务，还可以继续探索： 之前只在输入城市名时查询天气，有没有可能指定时间，让程序定时查询天气？ 选一个国内 API 和国外 API 分别进行调用，了解不同的调用姿势。更进一步，如果你来设计 API ，你会怎么设计？ 给程序增加温度单位转换功能 9B 不同国家、不同组织对实现同样功能的天气 API 实现方式各有不同，你可以了解 3-5 个，找到你任务更优雅的方式。未来你自己设计 API 时，就容易有思路了~ 参考： Weather API - Free Weather API JSON and XML - Developer API Weather For Website - Apixu Weather API- OpenWeatherMap Dark Sky API Yahoo! Weather RSS feed 和风天气 | 更专业的天气数据服务 10A-10B BGM 11A 彩蛋-大妈聊如何提问 11B 看完编程老司机 Zoom.Quiet 聊如何提问，你有无新思考？欢迎写在教程里，叫六个月前的自己更快掌握提问要义~ 此外，还可重温： How To Ask Questions The Smart Way by Eric Steven Raymond 提问的智慧 如何向开源社区提问题 · Issue #545 · seajs/seajs - 珠的自白: 34 如何提问?才对世界有帮助! 12A 课程反馈 var className='atoc';"},"week2/homework.html":{"url":"week2/homework.html","title":"作业.天气查询系统","keywords":"","body":"大船 这次作业比较深刻的感受到自己程序框架的问题。想在周末进行一些改进。 应该把用户进行封装 将API连接部分进行完全模块化，应对API的变更 对命令进行封装 当前版本: Project tree api/ const_value.py helper.py weather_search.py from sys import exit import requests from api.const_value import API, KEY, UNIT, LANGUAGE, LOCATION from api.helper import getLocation class WeatherSearcher(object): def __init__(self): self._history = [] def get_weather(self, city_to_search): import json result = requests.get(API, params={ 'key': KEY, 'location': city_to_search, 'language': LANGUAGE, 'unit': UNIT }, timeout=1) try: data = (json.loads(result.text)) # data为dict类型 if \"status\" in data: return None data = data[\"results\"][0] # 获取主干信息，类型为字典 response_info = data[\"location\"][\"name\"] + \" \" + data[\"now\"][\"text\"] +\"\\n\" + data[\"last_update\"] self._history.append(response_info) return response_info except BaseException as err: raise print(\"API查询异常!\") return None def get_help(self): help_info = ''' 输入城市名，查询该城市的天气数据； 输入help或者h，获得帮助信息； 输入history，显示查询历史； 输入quit, 退出程序。 ''' return help_info def get_history(self): return self._history def run(): # 初始化城市天气搜索类 weather_searcher = WeatherSearcher() while True: try: city_to_search = input(\"请输入指令和你要查询的城市名: \") except BaseException as err: print(\"你的输入导致系统报错，gg\") exit(0) # 输入矫正 city_to_search = city_to_search.replace(\" \", \"\") # 判断输入内容 if city_to_search == \"quit\": print(\"再见！\") exit(0) elif city_to_search in [\"help\", \"h\"]: print(weather_searcher.get_help()) elif city_to_search == \"history\": print(weather_searcher.get_history()) else: response_info = weather_searcher.get_weather(city_to_search) if response_info is not None: print(response_info) else: print(\"你要查找的城市没有找到，或者API异常，请重新输入!可以输入help或者h查看帮助信息。\") if __name__ == \"__main__\": run() var className='atoc';"},"week3/":{"url":"week3/","title":"第3周","keywords":"","body":"var className='atoc';"},"week4/":{"url":"week4/","title":"第4周","keywords":"","body":"var className='atoc';"},"week5/":{"url":"week5/","title":"第5周","keywords":"","body":"var className='atoc';"},"week6/":{"url":"week6/","title":"第6周","keywords":"","body":"var className='atoc';"},"week7/":{"url":"week7/","title":"第7周","keywords":"","body":"var className='atoc';"},"week8/":{"url":"week8/","title":"第8周","keywords":"","body":"var className='atoc';"},"week9/":{"url":"week9/","title":"第9周","keywords":"","body":"var className='atoc';"}}