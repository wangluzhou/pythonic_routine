{"./":{"url":"./","title":"Introduction","keywords":"","body":"Introduction 一起来写作写gitbook吧~ 规则： 一级目录按照周数来，符合大家的学习顺序。 内容分类： 开智卡片内容：完成卡片的抄录和整理，特别是对卡片里链接里的内容进行整理 [环境]Python三座大山之一：环境。讲述你遇到的一些环境配置的问题。 [语言]Python三座大山之一：Python语言。讲述你碰到的一些Python本身的问题。 [包]Python三座大山之一：Python包。讲述你用到一些包信息，比如爬虫包，科学计算包等等。 [作业]作业交流 卡片内容是我们的主线，直接写在每一周的README.md文件内。 如果要分享三座大山里面的相关内容，请直接在对应的weekX里面插入新的md文件，并且在文件summary.md里面进行补充，加入一个二级目录。 比如我想加入一些gitbook的使用心得。那么我需要在summary.md文件加入如下[环境.gitbook使用]，其中的环境表示这块内容属于环境子内容： * [Introduction](README.md) * [第0周](week0/README.md) * [环境.gitbook使用](week0/gitbook.md) * [第1周](week1/README.md) 然后在week0下面添加gitbook.md 操作手册 由于当前gitbook发布的电子书在浏览器上总是打不开，因此暂时采用迂回方法,即利用gitpage进行发布。 安装gitbook 在本地clone我们的pythonic routine这个库 进行自己的修改 在pythonic_routine目录下输入gitbook build 生成静态页面目录_book 将_book下面所有的文件以及pythonic_routine下所有的文件都copy到另一个新的文件夹下，cd到该文件夹下，切换到gh-pages分支：git checkout gh-pages 然后上传到gh-pages.即add，commit,push流程。 注意最后的push命令如下：git push origin gh-pages var className='atoc';"},"week0/":{"url":"week0/","title":"第0周","keywords":"","body":"第0周开片内容整理 var className='atoc';"},"week0/gitbook.html":{"url":"week0/gitbook.html","title":"环境.gitbook使用","keywords":"","body":" gitbook 添加.gitignore添加一些不需要上传的文件 如何将gitbook发布到自己的域名的子域名上 gitbook如何安装插件？ gitbook editor只支持https并不支持ssh gitbook插件介绍 gitbook动态更新问题 注意：gitbook editor打开的时候不要直接选择云端的gitbook库，而是要选择本地的gitbook库，这样gitbook和atom就可以实现本地的同步。 如何将gitbook发布到个人域名的子域名下 gitbook 参考教程 需要注意的是，我们正常安装的其实是gitbook-cli,如果只是安装gitbook的话，gitbook的命令行是无效的。也就是输入： npm install -g gitbook-cli gitbook可能支持两级目录。 推荐在编写gitbook的时候始终打开gitbook serve,这样一来，在文件的编写修改过程中，每一次保存文件，gitbook serve都会自动编译，所以可以持续通过浏览器查看最新的书籍效果。非常酷炫！！！ 整体流程就按照上面参考教程的指示操作就行。但是需要注意的是，我们的最终目的都是希望能有自己的书籍域名可以公开发布我们的书籍。因此最后必然需要同步到github通过gitpage进行发布。 另外gitbook自带搜索引擎，你说酷不酷！ GitBook.com 为每本书籍都创建了一个 Git 项目，并且使用这个 Git 项目来管理书籍源码（注意：这里的源码是指所有用户提交的内容）。正如在 编辑书籍 中介绍的那样，我们可以通过向书籍的 Git 项目提交内容来更新书籍。 另外，GitBook.com 还可以集成 GitHub，所以用户可以将书籍的源码通过 GitHub 上的项目来管理，这样可以使用 GitHub 带来的各种优点，例如： 其它用户可以 fork 用户可以点赞，获得更新提醒 用户可以贡献自己的内容GitBook.com 为每本书籍都创建了一个 Git 项目，并且使用这个 Git 项目来管理书籍源码（注意：这里的源码是指所有用户提交的内容）。正如在 编辑书籍 中介绍的那样，我们可以通过向书籍的 Git 项目提交内容来更新书籍。 另外，GitBook.com 还可以集成 GitHub，所以用户可以将书籍的源码通过 GitHub 上的项目来管理，这样可以使用 GitHub 带来的各种优点，例如： 其它用户可以 fork 用户可以点赞，获得更新提醒 用户可以贡献自己的内容 关于如何将本地的gitbook上传到gitbook 但是我们其实并不需要这么做，只要上传到github，然后将github这个库和gitbook的某本书关联一下就行了，唯一要注意的就是这个库的文件树格式要遵循gitbook的要求。所以本地的环境维持github的环境就好，减少踩坑的概率。 如果你的gitbook找不到你在github的库，你就需要去github上设置一下。 在github右上角点击setting,进入设置页面，在左下角做到installed Github apps，点击进去，然后点击gitbook，在repository access设置All repositories即可。 添加.gitignore添加一些不需要上传的文件 如何将gitbook发布到自己的域名的子域名上 将gitbook挂在到自己的子域名一定是一个非常有趣的问题。 gitbook如何安装插件？ 似乎有两种安装方法: 方法一 方法二 有空研究一下 gitbook editor只支持https并不支持ssh 我们需要将gitbook远程库的连接方式改成https gitbook插件介绍 资源1 gitbook官网资源 gitbook动态更新问题 当我们输入gitbook serve的时候，一旦更新了文件，就会报错，导致gitbook serve停止工作。 Restart after change in file SUMMARY.md Stopping server Error: EPERM: operation not permitted, mkdir 'C:\\Users\\cleopatra\\Desktop\\abum_code\\_book' github上的creatop-john提出了一个办法,有时会有效： gitbook serve delete _book folder once now each time you change the md file, the server will stop and start over again and again 注意：gitbook editor打开的时候不要直接选择云端的gitbook库，而是要选择本地的gitbook库，这样gitbook和atom就可以实现本地的同步。 如何将gitbook发布到个人域名的子域名下 参考资料 var className='atoc';"},"week0/git.html":{"url":"week0/git.html","title":"环境.git使用","keywords":"","body":"git踩坑之路 git 删除已经track的文件 参考文章 在git中如果想忽略掉某个文件，不让这个文件提交到版本库中，可以使用修改根目录中 .gitignore 文件的方法（如无，则需自己手工建立此文件）。这个文件每一行保存了一个匹配的规则例如： # 此为注释 – 将被 Git 忽略 *.a # 忽略所有 .a 结尾的文件 !lib.a # 但 lib.a 除外 /TODO # 仅仅忽略项目根目录下的 TODO 文件，不包括 subdir/TODO build/ # 忽略 build/ 目录下的所有文件 doc/*.txt # 会忽略 doc/notes.txt 但不包括 doc/server/arch.txt 规则很简单，不做过多解释，但是有时候在项目开发过程中，突然心血来潮想把某些目录或文件加入忽略规则，按照上述方法定义后发现并未生效，原因是.gitignore只能忽略那些原来没有被track的文件，如果某些文件已经被纳入了版本管理中，则修改.gitignore是无效的。那么解决方法就是先把本地缓存删除（改变成未track状态），然后再提交： git rm -r --cached . git add . git commit -m 'update .gitignore' 关于git无法忽视_book的最终原因 好吧，是我把.gitignore写成.gitigorne了 git切换分支 git branch -a 查看所有分支 git branch 查看当前分支 git checkout master 切换到master分支 关于git无法识别.gitignore的原因 var className='atoc';"},"week1/":{"url":"week1/","title":"第1周","keywords":"","body":"第一周卡片内容 var className='atoc';"},"week1/homework.html":{"url":"week1/homework.html","title":"作业.天气查询系统","keywords":"","body":"作业汇总 作业任务： 完成一个最简天气查询程序，运行在命令行界面，实现以下功能： 输入城市名，返回该城市的天气数据； 输入指令，打印帮助文档（一般使用 h 或 help）； 输入指令，退出程序的交互（一般使用 quit 或 exit）； 在退出程序之前，打印查询过的所有城市。 所用天气数据见 https://github.com/AIHackers/Py101-004/tree/master/Chap1/resource 中 weather_info.txt 文件。 大船: 整体思想：封装天气查询功能到一个类中。 import csv from sys import exit class WeatherSearcher(object): def __init__(self): self.data_init() self._history = \"\" def data_init(self): self._data = {} with open('../resource/weather_info.txt', 'r') as f: for line in f: tmp = line.strip().split(',') self._data[tmp[0]] = tmp[1] def get_weather(self, city_to_search): if city_to_search in self._data.keys(): weather = self._data[city_to_search] self._history += city_to_search + \" \" + weather + \"\\n\" return weather else: return None def get_help(self): help_info = ''' 输入城市名，查询该城市的天气数据； 输入help或者h，获得帮助信息； 输入history，显示查询历史； 输入quit, 退出程序。 ''' return help_info def get_history(self): return self._history def run(): # 初始化城市天气搜索类 weather_searcher = WeatherSearcher() while True: city_to_search = input(\"请输入指令和你要查询的城市名: \") # 输入矫正 city_to_search = city_to_search.replace(\" \", \"\") # 判断输入内容 if city_to_search == \"quit\": print(\"再见！\") exit() elif city_to_search in [\"help\", \"h\"]: print(weather_searcher.get_help()) elif city_to_search == \"history\": print(weather_searcher.get_history()) else: weather = weather_searcher.get_weather(city_to_search) if weather is not None: print(\"{city}的天气状况为{weather}\".format(city=city_to_search, weather=weather)) else: print(\"你要查找的城市没有找到，请重新输入!可以输入help或者h查看帮助信息。\") if __name__ == \"__main__\": run() var className='atoc';"},"week2/":{"url":"week2/","title":"第2周","keywords":"","body":"var className='atoc';"},"week3/":{"url":"week3/","title":"第3周","keywords":"","body":"var className='atoc';"},"week4/":{"url":"week4/","title":"第4周","keywords":"","body":"var className='atoc';"},"week5/":{"url":"week5/","title":"第5周","keywords":"","body":"var className='atoc';"},"week6/":{"url":"week6/","title":"第6周","keywords":"","body":"var className='atoc';"},"week7/":{"url":"week7/","title":"第7周","keywords":"","body":"var className='atoc';"},"week8/":{"url":"week8/","title":"第8周","keywords":"","body":"var className='atoc';"},"week9/":{"url":"week9/","title":"第9周","keywords":"","body":"var className='atoc';"}}